module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMoim {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Moim {
  id: ID!
  place: String!
  description: String
  maxEntry: Int!
  time: DateTime!
  creator: User!
  participants(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  gender: String!
}

type MoimConnection {
  pageInfo: PageInfo!
  edges: [MoimEdge]!
  aggregate: AggregateMoim!
}

input MoimCreateInput {
  id: ID
  place: String!
  description: String
  maxEntry: Int
  time: DateTime!
  creator: UserCreateOneWithoutCreatedMoimInput!
  participants: UserCreateManyWithoutJoinedMoimInput
  gender: String
}

input MoimCreateManyWithoutCreatorInput {
  create: [MoimCreateWithoutCreatorInput!]
  connect: [MoimWhereUniqueInput!]
}

input MoimCreateManyWithoutParticipantsInput {
  create: [MoimCreateWithoutParticipantsInput!]
  connect: [MoimWhereUniqueInput!]
}

input MoimCreateWithoutCreatorInput {
  id: ID
  place: String!
  description: String
  maxEntry: Int
  time: DateTime!
  participants: UserCreateManyWithoutJoinedMoimInput
  gender: String
}

input MoimCreateWithoutParticipantsInput {
  id: ID
  place: String!
  description: String
  maxEntry: Int
  time: DateTime!
  creator: UserCreateOneWithoutCreatedMoimInput!
  gender: String
}

type MoimEdge {
  node: Moim!
  cursor: String!
}

enum MoimOrderByInput {
  id_ASC
  id_DESC
  place_ASC
  place_DESC
  description_ASC
  description_DESC
  maxEntry_ASC
  maxEntry_DESC
  time_ASC
  time_DESC
  gender_ASC
  gender_DESC
}

type MoimPreviousValues {
  id: ID!
  place: String!
  description: String
  maxEntry: Int!
  time: DateTime!
  gender: String!
}

input MoimScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  place: String
  place_not: String
  place_in: [String!]
  place_not_in: [String!]
  place_lt: String
  place_lte: String
  place_gt: String
  place_gte: String
  place_contains: String
  place_not_contains: String
  place_starts_with: String
  place_not_starts_with: String
  place_ends_with: String
  place_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  maxEntry: Int
  maxEntry_not: Int
  maxEntry_in: [Int!]
  maxEntry_not_in: [Int!]
  maxEntry_lt: Int
  maxEntry_lte: Int
  maxEntry_gt: Int
  maxEntry_gte: Int
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  AND: [MoimScalarWhereInput!]
  OR: [MoimScalarWhereInput!]
  NOT: [MoimScalarWhereInput!]
}

type MoimSubscriptionPayload {
  mutation: MutationType!
  node: Moim
  updatedFields: [String!]
  previousValues: MoimPreviousValues
}

input MoimSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MoimWhereInput
  AND: [MoimSubscriptionWhereInput!]
  OR: [MoimSubscriptionWhereInput!]
  NOT: [MoimSubscriptionWhereInput!]
}

input MoimUpdateInput {
  place: String
  description: String
  maxEntry: Int
  time: DateTime
  creator: UserUpdateOneRequiredWithoutCreatedMoimInput
  participants: UserUpdateManyWithoutJoinedMoimInput
  gender: String
}

input MoimUpdateManyDataInput {
  place: String
  description: String
  maxEntry: Int
  time: DateTime
  gender: String
}

input MoimUpdateManyMutationInput {
  place: String
  description: String
  maxEntry: Int
  time: DateTime
  gender: String
}

input MoimUpdateManyWithoutCreatorInput {
  create: [MoimCreateWithoutCreatorInput!]
  delete: [MoimWhereUniqueInput!]
  connect: [MoimWhereUniqueInput!]
  set: [MoimWhereUniqueInput!]
  disconnect: [MoimWhereUniqueInput!]
  update: [MoimUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [MoimUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [MoimScalarWhereInput!]
  updateMany: [MoimUpdateManyWithWhereNestedInput!]
}

input MoimUpdateManyWithoutParticipantsInput {
  create: [MoimCreateWithoutParticipantsInput!]
  delete: [MoimWhereUniqueInput!]
  connect: [MoimWhereUniqueInput!]
  set: [MoimWhereUniqueInput!]
  disconnect: [MoimWhereUniqueInput!]
  update: [MoimUpdateWithWhereUniqueWithoutParticipantsInput!]
  upsert: [MoimUpsertWithWhereUniqueWithoutParticipantsInput!]
  deleteMany: [MoimScalarWhereInput!]
  updateMany: [MoimUpdateManyWithWhereNestedInput!]
}

input MoimUpdateManyWithWhereNestedInput {
  where: MoimScalarWhereInput!
  data: MoimUpdateManyDataInput!
}

input MoimUpdateWithoutCreatorDataInput {
  place: String
  description: String
  maxEntry: Int
  time: DateTime
  participants: UserUpdateManyWithoutJoinedMoimInput
  gender: String
}

input MoimUpdateWithoutParticipantsDataInput {
  place: String
  description: String
  maxEntry: Int
  time: DateTime
  creator: UserUpdateOneRequiredWithoutCreatedMoimInput
  gender: String
}

input MoimUpdateWithWhereUniqueWithoutCreatorInput {
  where: MoimWhereUniqueInput!
  data: MoimUpdateWithoutCreatorDataInput!
}

input MoimUpdateWithWhereUniqueWithoutParticipantsInput {
  where: MoimWhereUniqueInput!
  data: MoimUpdateWithoutParticipantsDataInput!
}

input MoimUpsertWithWhereUniqueWithoutCreatorInput {
  where: MoimWhereUniqueInput!
  update: MoimUpdateWithoutCreatorDataInput!
  create: MoimCreateWithoutCreatorInput!
}

input MoimUpsertWithWhereUniqueWithoutParticipantsInput {
  where: MoimWhereUniqueInput!
  update: MoimUpdateWithoutParticipantsDataInput!
  create: MoimCreateWithoutParticipantsInput!
}

input MoimWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  place: String
  place_not: String
  place_in: [String!]
  place_not_in: [String!]
  place_lt: String
  place_lte: String
  place_gt: String
  place_gte: String
  place_contains: String
  place_not_contains: String
  place_starts_with: String
  place_not_starts_with: String
  place_ends_with: String
  place_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  maxEntry: Int
  maxEntry_not: Int
  maxEntry_in: [Int!]
  maxEntry_not_in: [Int!]
  maxEntry_lt: Int
  maxEntry_lte: Int
  maxEntry_gt: Int
  maxEntry_gte: Int
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  creator: UserWhereInput
  participants_every: UserWhereInput
  participants_some: UserWhereInput
  participants_none: UserWhereInput
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  AND: [MoimWhereInput!]
  OR: [MoimWhereInput!]
  NOT: [MoimWhereInput!]
}

input MoimWhereUniqueInput {
  id: ID
}

type Mutation {
  createMoim(data: MoimCreateInput!): Moim!
  updateMoim(data: MoimUpdateInput!, where: MoimWhereUniqueInput!): Moim
  updateManyMoims(data: MoimUpdateManyMutationInput!, where: MoimWhereInput): BatchPayload!
  upsertMoim(where: MoimWhereUniqueInput!, create: MoimCreateInput!, update: MoimUpdateInput!): Moim!
  deleteMoim(where: MoimWhereUniqueInput!): Moim
  deleteManyMoims(where: MoimWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  moim(where: MoimWhereUniqueInput!): Moim
  moims(where: MoimWhereInput, orderBy: MoimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Moim]!
  moimsConnection(where: MoimWhereInput, orderBy: MoimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MoimConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  moim(where: MoimSubscriptionWhereInput): MoimSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  gender: String!
  certKey: String!
  joinedAt: DateTime!
  createdMoim(where: MoimWhereInput, orderBy: MoimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Moim!]
  joinedMoim(where: MoimWhereInput, orderBy: MoimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Moim!]
  blacklist(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  gender: String!
  certKey: String!
  createdMoim: MoimCreateManyWithoutCreatorInput
  joinedMoim: MoimCreateManyWithoutParticipantsInput
  blacklist: UserCreateManyInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutJoinedMoimInput {
  create: [UserCreateWithoutJoinedMoimInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCreatedMoimInput {
  create: UserCreateWithoutCreatedMoimInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCreatedMoimInput {
  id: ID
  name: String!
  gender: String!
  certKey: String!
  joinedMoim: MoimCreateManyWithoutParticipantsInput
  blacklist: UserCreateManyInput
}

input UserCreateWithoutJoinedMoimInput {
  id: ID
  name: String!
  gender: String!
  certKey: String!
  createdMoim: MoimCreateManyWithoutCreatorInput
  blacklist: UserCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  gender_ASC
  gender_DESC
  certKey_ASC
  certKey_DESC
  joinedAt_ASC
  joinedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  gender: String!
  certKey: String!
  joinedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  certKey: String
  certKey_not: String
  certKey_in: [String!]
  certKey_not_in: [String!]
  certKey_lt: String
  certKey_lte: String
  certKey_gt: String
  certKey_gte: String
  certKey_contains: String
  certKey_not_contains: String
  certKey_starts_with: String
  certKey_not_starts_with: String
  certKey_ends_with: String
  certKey_not_ends_with: String
  joinedAt: DateTime
  joinedAt_not: DateTime
  joinedAt_in: [DateTime!]
  joinedAt_not_in: [DateTime!]
  joinedAt_lt: DateTime
  joinedAt_lte: DateTime
  joinedAt_gt: DateTime
  joinedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  gender: String
  certKey: String
  createdMoim: MoimUpdateManyWithoutCreatorInput
  joinedMoim: MoimUpdateManyWithoutParticipantsInput
  blacklist: UserUpdateManyInput
}

input UserUpdateInput {
  name: String
  gender: String
  certKey: String
  createdMoim: MoimUpdateManyWithoutCreatorInput
  joinedMoim: MoimUpdateManyWithoutParticipantsInput
  blacklist: UserUpdateManyInput
}

input UserUpdateManyDataInput {
  name: String
  gender: String
  certKey: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  name: String
  gender: String
  certKey: String
}

input UserUpdateManyWithoutJoinedMoimInput {
  create: [UserCreateWithoutJoinedMoimInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutJoinedMoimInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutJoinedMoimInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCreatedMoimInput {
  create: UserCreateWithoutCreatedMoimInput
  update: UserUpdateWithoutCreatedMoimDataInput
  upsert: UserUpsertWithoutCreatedMoimInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCreatedMoimDataInput {
  name: String
  gender: String
  certKey: String
  joinedMoim: MoimUpdateManyWithoutParticipantsInput
  blacklist: UserUpdateManyInput
}

input UserUpdateWithoutJoinedMoimDataInput {
  name: String
  gender: String
  certKey: String
  createdMoim: MoimUpdateManyWithoutCreatorInput
  blacklist: UserUpdateManyInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutJoinedMoimInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutJoinedMoimDataInput!
}

input UserUpsertWithoutCreatedMoimInput {
  update: UserUpdateWithoutCreatedMoimDataInput!
  create: UserCreateWithoutCreatedMoimInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutJoinedMoimInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutJoinedMoimDataInput!
  create: UserCreateWithoutJoinedMoimInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  certKey: String
  certKey_not: String
  certKey_in: [String!]
  certKey_not_in: [String!]
  certKey_lt: String
  certKey_lte: String
  certKey_gt: String
  certKey_gte: String
  certKey_contains: String
  certKey_not_contains: String
  certKey_starts_with: String
  certKey_not_starts_with: String
  certKey_ends_with: String
  certKey_not_ends_with: String
  joinedAt: DateTime
  joinedAt_not: DateTime
  joinedAt_in: [DateTime!]
  joinedAt_not_in: [DateTime!]
  joinedAt_lt: DateTime
  joinedAt_lte: DateTime
  joinedAt_gt: DateTime
  joinedAt_gte: DateTime
  createdMoim_every: MoimWhereInput
  createdMoim_some: MoimWhereInput
  createdMoim_none: MoimWhereInput
  joinedMoim_every: MoimWhereInput
  joinedMoim_some: MoimWhereInput
  joinedMoim_none: MoimWhereInput
  blacklist_every: UserWhereInput
  blacklist_some: UserWhereInput
  blacklist_none: UserWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  certKey: String
}
`
      }
    