// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  moim: (where?: MoimWhereInput) => Promise<boolean>;
  place: (where?: PlaceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  moim: (where: MoimWhereUniqueInput) => MoimNullablePromise;
  moims: (args?: {
    where?: MoimWhereInput;
    orderBy?: MoimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Moim>;
  moimsConnection: (args?: {
    where?: MoimWhereInput;
    orderBy?: MoimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MoimConnectionPromise;
  place: (where: PlaceWhereUniqueInput) => PlaceNullablePromise;
  places: (args?: {
    where?: PlaceWhereInput;
    orderBy?: PlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Place>;
  placesConnection: (args?: {
    where?: PlaceWhereInput;
    orderBy?: PlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlaceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMoim: (data: MoimCreateInput) => MoimPromise;
  updateMoim: (args: {
    data: MoimUpdateInput;
    where: MoimWhereUniqueInput;
  }) => MoimPromise;
  updateManyMoims: (args: {
    data: MoimUpdateManyMutationInput;
    where?: MoimWhereInput;
  }) => BatchPayloadPromise;
  upsertMoim: (args: {
    where: MoimWhereUniqueInput;
    create: MoimCreateInput;
    update: MoimUpdateInput;
  }) => MoimPromise;
  deleteMoim: (where: MoimWhereUniqueInput) => MoimPromise;
  deleteManyMoims: (where?: MoimWhereInput) => BatchPayloadPromise;
  createPlace: (data: PlaceCreateInput) => PlacePromise;
  updatePlace: (args: {
    data: PlaceUpdateInput;
    where: PlaceWhereUniqueInput;
  }) => PlacePromise;
  updateManyPlaces: (args: {
    data: PlaceUpdateManyMutationInput;
    where?: PlaceWhereInput;
  }) => BatchPayloadPromise;
  upsertPlace: (args: {
    where: PlaceWhereUniqueInput;
    create: PlaceCreateInput;
    update: PlaceUpdateInput;
  }) => PlacePromise;
  deletePlace: (where: PlaceWhereUniqueInput) => PlacePromise;
  deleteManyPlaces: (where?: PlaceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  moim: (
    where?: MoimSubscriptionWhereInput
  ) => MoimSubscriptionPayloadSubscription;
  place: (
    where?: PlaceSubscriptionWhereInput
  ) => PlaceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MoimOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "maxEntry_ASC"
  | "maxEntry_DESC"
  | "time_ASC"
  | "time_DESC"
  | "ageMin_ASC"
  | "ageMin_DESC"
  | "ageMax_ASC"
  | "ageMax_DESC"
  | "gender_ASC"
  | "gender_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "authType_ASC"
  | "authType_DESC"
  | "authKey_ASC"
  | "authKey_DESC"
  | "name_ASC"
  | "name_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "joinedAt_ASC"
  | "joinedAt_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "picUrl_ASC"
  | "picUrl_DESC"
  | "ageMin_ASC"
  | "ageMin_DESC"
  | "ageMax_ASC"
  | "ageMax_DESC";

export type PlaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "googleId_ASC"
  | "googleId_DESC"
  | "moimCount_ASC"
  | "moimCount_DESC"
  | "likes_ASC"
  | "likes_DESC"
  | "dislikes_ASC"
  | "dislikes_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type MoimWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateWithoutJoinedMoimInput {
  id?: Maybe<ID_Input>;
  authType: String;
  authKey: String;
  name: String;
  gender: String;
  birthday: DateTimeInput;
  picUrl?: Maybe<String>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  createdMoim?: Maybe<MoimCreateManyWithoutCreatorInput>;
  blacklist?: Maybe<UserCreateManyInput>;
}

export interface MoimUpdateManyWithoutParticipantsInput {
  create?: Maybe<
    MoimCreateWithoutParticipantsInput[] | MoimCreateWithoutParticipantsInput
  >;
  delete?: Maybe<MoimWhereUniqueInput[] | MoimWhereUniqueInput>;
  connect?: Maybe<MoimWhereUniqueInput[] | MoimWhereUniqueInput>;
  set?: Maybe<MoimWhereUniqueInput[] | MoimWhereUniqueInput>;
  disconnect?: Maybe<MoimWhereUniqueInput[] | MoimWhereUniqueInput>;
  update?: Maybe<
    | MoimUpdateWithWhereUniqueWithoutParticipantsInput[]
    | MoimUpdateWithWhereUniqueWithoutParticipantsInput
  >;
  upsert?: Maybe<
    | MoimUpsertWithWhereUniqueWithoutParticipantsInput[]
    | MoimUpsertWithWhereUniqueWithoutParticipantsInput
  >;
  deleteMany?: Maybe<MoimScalarWhereInput[] | MoimScalarWhereInput>;
  updateMany?: Maybe<
    MoimUpdateManyWithWhereNestedInput[] | MoimUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface MoimUpdateWithWhereUniqueWithoutCreatorInput {
  where: MoimWhereUniqueInput;
  data: MoimUpdateWithoutCreatorDataInput;
}

export interface MoimCreateManyWithoutParticipantsInput {
  create?: Maybe<
    MoimCreateWithoutParticipantsInput[] | MoimCreateWithoutParticipantsInput
  >;
  connect?: Maybe<MoimWhereUniqueInput[] | MoimWhereUniqueInput>;
}

export interface PlaceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  googleId?: Maybe<String>;
  googleId_not?: Maybe<String>;
  googleId_in?: Maybe<String[] | String>;
  googleId_not_in?: Maybe<String[] | String>;
  googleId_lt?: Maybe<String>;
  googleId_lte?: Maybe<String>;
  googleId_gt?: Maybe<String>;
  googleId_gte?: Maybe<String>;
  googleId_contains?: Maybe<String>;
  googleId_not_contains?: Maybe<String>;
  googleId_starts_with?: Maybe<String>;
  googleId_not_starts_with?: Maybe<String>;
  googleId_ends_with?: Maybe<String>;
  googleId_not_ends_with?: Maybe<String>;
  moimCount?: Maybe<Int>;
  moimCount_not?: Maybe<Int>;
  moimCount_in?: Maybe<Int[] | Int>;
  moimCount_not_in?: Maybe<Int[] | Int>;
  moimCount_lt?: Maybe<Int>;
  moimCount_lte?: Maybe<Int>;
  moimCount_gt?: Maybe<Int>;
  moimCount_gte?: Maybe<Int>;
  likes?: Maybe<Int>;
  likes_not?: Maybe<Int>;
  likes_in?: Maybe<Int[] | Int>;
  likes_not_in?: Maybe<Int[] | Int>;
  likes_lt?: Maybe<Int>;
  likes_lte?: Maybe<Int>;
  likes_gt?: Maybe<Int>;
  likes_gte?: Maybe<Int>;
  dislikes?: Maybe<Int>;
  dislikes_not?: Maybe<Int>;
  dislikes_in?: Maybe<Int[] | Int>;
  dislikes_not_in?: Maybe<Int[] | Int>;
  dislikes_lt?: Maybe<Int>;
  dislikes_lte?: Maybe<Int>;
  dislikes_gt?: Maybe<Int>;
  dislikes_gte?: Maybe<Int>;
  creator?: Maybe<UserWhereInput>;
  AND?: Maybe<PlaceWhereInput[] | PlaceWhereInput>;
  OR?: Maybe<PlaceWhereInput[] | PlaceWhereInput>;
  NOT?: Maybe<PlaceWhereInput[] | PlaceWhereInput>;
}

export interface MoimCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  place: PlaceCreateOneInput;
  description?: Maybe<String>;
  maxEntry?: Maybe<Int>;
  time: DateTimeInput;
  creator: UserCreateOneWithoutCreatedMoimInput;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  gender?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserCreateOneWithoutCreatedMoimInput {
  create?: Maybe<UserCreateWithoutCreatedMoimInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface MoimSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MoimWhereInput>;
  AND?: Maybe<MoimSubscriptionWhereInput[] | MoimSubscriptionWhereInput>;
  OR?: Maybe<MoimSubscriptionWhereInput[] | MoimSubscriptionWhereInput>;
  NOT?: Maybe<MoimSubscriptionWhereInput[] | MoimSubscriptionWhereInput>;
}

export interface UserCreateWithoutCreatedMoimInput {
  id?: Maybe<ID_Input>;
  authType: String;
  authKey: String;
  name: String;
  gender: String;
  birthday: DateTimeInput;
  picUrl?: Maybe<String>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  joinedMoim?: Maybe<MoimCreateManyWithoutParticipantsInput>;
  blacklist?: Maybe<UserCreateManyInput>;
}

export interface UserUpdateInput {
  authType?: Maybe<String>;
  authKey?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  picUrl?: Maybe<String>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  createdMoim?: Maybe<MoimUpdateManyWithoutCreatorInput>;
  joinedMoim?: Maybe<MoimUpdateManyWithoutParticipantsInput>;
  blacklist?: Maybe<UserUpdateManyInput>;
}

export interface MoimUpdateInput {
  place?: Maybe<PlaceUpdateOneRequiredInput>;
  description?: Maybe<String>;
  maxEntry?: Maybe<Int>;
  time?: Maybe<DateTimeInput>;
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedMoimInput>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  gender?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutJoinedMoimInput>;
}

export interface PlaceUpdateInput {
  googleId?: Maybe<String>;
  moimCount?: Maybe<Int>;
  likes?: Maybe<Int>;
  dislikes?: Maybe<Int>;
  creator?: Maybe<UserUpdateOneInput>;
}

export interface PlaceUpdateOneRequiredInput {
  create?: Maybe<PlaceCreateInput>;
  update?: Maybe<PlaceUpdateDataInput>;
  upsert?: Maybe<PlaceUpsertNestedInput>;
  connect?: Maybe<PlaceWhereUniqueInput>;
}

export interface MoimUpdateManyMutationInput {
  description?: Maybe<String>;
  maxEntry?: Maybe<Int>;
  time?: Maybe<DateTimeInput>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  gender?: Maybe<String>;
}

export interface PlaceUpdateDataInput {
  googleId?: Maybe<String>;
  moimCount?: Maybe<Int>;
  likes?: Maybe<Int>;
  dislikes?: Maybe<Int>;
  creator?: Maybe<UserUpdateOneInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface MoimUpdateWithoutParticipantsDataInput {
  place?: Maybe<PlaceUpdateOneRequiredInput>;
  description?: Maybe<String>;
  maxEntry?: Maybe<Int>;
  time?: Maybe<DateTimeInput>;
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedMoimInput>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  gender?: Maybe<String>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  authKey?: Maybe<String>;
}>;

export interface UserUpdateDataInput {
  authType?: Maybe<String>;
  authKey?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  picUrl?: Maybe<String>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  createdMoim?: Maybe<MoimUpdateManyWithoutCreatorInput>;
  joinedMoim?: Maybe<MoimUpdateManyWithoutParticipantsInput>;
  blacklist?: Maybe<UserUpdateManyInput>;
}

export interface UserUpdateWithoutCreatedMoimDataInput {
  authType?: Maybe<String>;
  authKey?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  picUrl?: Maybe<String>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  joinedMoim?: Maybe<MoimUpdateManyWithoutParticipantsInput>;
  blacklist?: Maybe<UserUpdateManyInput>;
}

export interface MoimUpdateManyWithoutCreatorInput {
  create?: Maybe<
    MoimCreateWithoutCreatorInput[] | MoimCreateWithoutCreatorInput
  >;
  delete?: Maybe<MoimWhereUniqueInput[] | MoimWhereUniqueInput>;
  connect?: Maybe<MoimWhereUniqueInput[] | MoimWhereUniqueInput>;
  set?: Maybe<MoimWhereUniqueInput[] | MoimWhereUniqueInput>;
  disconnect?: Maybe<MoimWhereUniqueInput[] | MoimWhereUniqueInput>;
  update?: Maybe<
    | MoimUpdateWithWhereUniqueWithoutCreatorInput[]
    | MoimUpdateWithWhereUniqueWithoutCreatorInput
  >;
  upsert?: Maybe<
    | MoimUpsertWithWhereUniqueWithoutCreatorInput[]
    | MoimUpsertWithWhereUniqueWithoutCreatorInput
  >;
  deleteMany?: Maybe<MoimScalarWhereInput[] | MoimScalarWhereInput>;
  updateMany?: Maybe<
    MoimUpdateManyWithWhereNestedInput[] | MoimUpdateManyWithWhereNestedInput
  >;
}

export interface PlaceCreateOneInput {
  create?: Maybe<PlaceCreateInput>;
  connect?: Maybe<PlaceWhereUniqueInput>;
}

export interface MoimUpdateWithWhereUniqueWithoutParticipantsInput {
  where: MoimWhereUniqueInput;
  data: MoimUpdateWithoutParticipantsDataInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface MoimUpdateWithoutCreatorDataInput {
  place?: Maybe<PlaceUpdateOneRequiredInput>;
  description?: Maybe<String>;
  maxEntry?: Maybe<Int>;
  time?: Maybe<DateTimeInput>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  gender?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutJoinedMoimInput>;
}

export interface MoimCreateManyWithoutCreatorInput {
  create?: Maybe<
    MoimCreateWithoutCreatorInput[] | MoimCreateWithoutCreatorInput
  >;
  connect?: Maybe<MoimWhereUniqueInput[] | MoimWhereUniqueInput>;
}

export interface UserUpdateManyWithoutJoinedMoimInput {
  create?: Maybe<
    UserCreateWithoutJoinedMoimInput[] | UserCreateWithoutJoinedMoimInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutJoinedMoimInput[]
    | UserUpdateWithWhereUniqueWithoutJoinedMoimInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutJoinedMoimInput[]
    | UserUpsertWithWhereUniqueWithoutJoinedMoimInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateManyWithoutJoinedMoimInput {
  create?: Maybe<
    UserCreateWithoutJoinedMoimInput[] | UserCreateWithoutJoinedMoimInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserUpdateWithWhereUniqueWithoutJoinedMoimInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutJoinedMoimDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  authType?: Maybe<String>;
  authType_not?: Maybe<String>;
  authType_in?: Maybe<String[] | String>;
  authType_not_in?: Maybe<String[] | String>;
  authType_lt?: Maybe<String>;
  authType_lte?: Maybe<String>;
  authType_gt?: Maybe<String>;
  authType_gte?: Maybe<String>;
  authType_contains?: Maybe<String>;
  authType_not_contains?: Maybe<String>;
  authType_starts_with?: Maybe<String>;
  authType_not_starts_with?: Maybe<String>;
  authType_ends_with?: Maybe<String>;
  authType_not_ends_with?: Maybe<String>;
  authKey?: Maybe<String>;
  authKey_not?: Maybe<String>;
  authKey_in?: Maybe<String[] | String>;
  authKey_not_in?: Maybe<String[] | String>;
  authKey_lt?: Maybe<String>;
  authKey_lte?: Maybe<String>;
  authKey_gt?: Maybe<String>;
  authKey_gte?: Maybe<String>;
  authKey_contains?: Maybe<String>;
  authKey_not_contains?: Maybe<String>;
  authKey_starts_with?: Maybe<String>;
  authKey_not_starts_with?: Maybe<String>;
  authKey_ends_with?: Maybe<String>;
  authKey_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  joinedAt?: Maybe<DateTimeInput>;
  joinedAt_not?: Maybe<DateTimeInput>;
  joinedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  joinedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  joinedAt_lt?: Maybe<DateTimeInput>;
  joinedAt_lte?: Maybe<DateTimeInput>;
  joinedAt_gt?: Maybe<DateTimeInput>;
  joinedAt_gte?: Maybe<DateTimeInput>;
  birthday?: Maybe<DateTimeInput>;
  birthday_not?: Maybe<DateTimeInput>;
  birthday_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_lt?: Maybe<DateTimeInput>;
  birthday_lte?: Maybe<DateTimeInput>;
  birthday_gt?: Maybe<DateTimeInput>;
  birthday_gte?: Maybe<DateTimeInput>;
  picUrl?: Maybe<String>;
  picUrl_not?: Maybe<String>;
  picUrl_in?: Maybe<String[] | String>;
  picUrl_not_in?: Maybe<String[] | String>;
  picUrl_lt?: Maybe<String>;
  picUrl_lte?: Maybe<String>;
  picUrl_gt?: Maybe<String>;
  picUrl_gte?: Maybe<String>;
  picUrl_contains?: Maybe<String>;
  picUrl_not_contains?: Maybe<String>;
  picUrl_starts_with?: Maybe<String>;
  picUrl_not_starts_with?: Maybe<String>;
  picUrl_ends_with?: Maybe<String>;
  picUrl_not_ends_with?: Maybe<String>;
  ageMin?: Maybe<Int>;
  ageMin_not?: Maybe<Int>;
  ageMin_in?: Maybe<Int[] | Int>;
  ageMin_not_in?: Maybe<Int[] | Int>;
  ageMin_lt?: Maybe<Int>;
  ageMin_lte?: Maybe<Int>;
  ageMin_gt?: Maybe<Int>;
  ageMin_gte?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  ageMax_not?: Maybe<Int>;
  ageMax_in?: Maybe<Int[] | Int>;
  ageMax_not_in?: Maybe<Int[] | Int>;
  ageMax_lt?: Maybe<Int>;
  ageMax_lte?: Maybe<Int>;
  ageMax_gt?: Maybe<Int>;
  ageMax_gte?: Maybe<Int>;
  createdMoim_every?: Maybe<MoimWhereInput>;
  createdMoim_some?: Maybe<MoimWhereInput>;
  createdMoim_none?: Maybe<MoimWhereInput>;
  joinedMoim_every?: Maybe<MoimWhereInput>;
  joinedMoim_some?: Maybe<MoimWhereInput>;
  joinedMoim_none?: Maybe<MoimWhereInput>;
  blacklist_every?: Maybe<UserWhereInput>;
  blacklist_some?: Maybe<UserWhereInput>;
  blacklist_none?: Maybe<UserWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpdateWithoutJoinedMoimDataInput {
  authType?: Maybe<String>;
  authKey?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  picUrl?: Maybe<String>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  createdMoim?: Maybe<MoimUpdateManyWithoutCreatorInput>;
  blacklist?: Maybe<UserUpdateManyInput>;
}

export interface UserUpdateManyMutationInput {
  authType?: Maybe<String>;
  authKey?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  picUrl?: Maybe<String>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export type PlaceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  googleId?: Maybe<String>;
}>;

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface MoimUpsertWithWhereUniqueWithoutParticipantsInput {
  where: MoimWhereUniqueInput;
  update: MoimUpdateWithoutParticipantsDataInput;
  create: MoimCreateWithoutParticipantsInput;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpdateOneRequiredWithoutCreatedMoimInput {
  create?: Maybe<UserCreateWithoutCreatedMoimInput>;
  update?: Maybe<UserUpdateWithoutCreatedMoimDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedMoimInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  authType?: Maybe<String>;
  authType_not?: Maybe<String>;
  authType_in?: Maybe<String[] | String>;
  authType_not_in?: Maybe<String[] | String>;
  authType_lt?: Maybe<String>;
  authType_lte?: Maybe<String>;
  authType_gt?: Maybe<String>;
  authType_gte?: Maybe<String>;
  authType_contains?: Maybe<String>;
  authType_not_contains?: Maybe<String>;
  authType_starts_with?: Maybe<String>;
  authType_not_starts_with?: Maybe<String>;
  authType_ends_with?: Maybe<String>;
  authType_not_ends_with?: Maybe<String>;
  authKey?: Maybe<String>;
  authKey_not?: Maybe<String>;
  authKey_in?: Maybe<String[] | String>;
  authKey_not_in?: Maybe<String[] | String>;
  authKey_lt?: Maybe<String>;
  authKey_lte?: Maybe<String>;
  authKey_gt?: Maybe<String>;
  authKey_gte?: Maybe<String>;
  authKey_contains?: Maybe<String>;
  authKey_not_contains?: Maybe<String>;
  authKey_starts_with?: Maybe<String>;
  authKey_not_starts_with?: Maybe<String>;
  authKey_ends_with?: Maybe<String>;
  authKey_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  joinedAt?: Maybe<DateTimeInput>;
  joinedAt_not?: Maybe<DateTimeInput>;
  joinedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  joinedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  joinedAt_lt?: Maybe<DateTimeInput>;
  joinedAt_lte?: Maybe<DateTimeInput>;
  joinedAt_gt?: Maybe<DateTimeInput>;
  joinedAt_gte?: Maybe<DateTimeInput>;
  birthday?: Maybe<DateTimeInput>;
  birthday_not?: Maybe<DateTimeInput>;
  birthday_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_lt?: Maybe<DateTimeInput>;
  birthday_lte?: Maybe<DateTimeInput>;
  birthday_gt?: Maybe<DateTimeInput>;
  birthday_gte?: Maybe<DateTimeInput>;
  picUrl?: Maybe<String>;
  picUrl_not?: Maybe<String>;
  picUrl_in?: Maybe<String[] | String>;
  picUrl_not_in?: Maybe<String[] | String>;
  picUrl_lt?: Maybe<String>;
  picUrl_lte?: Maybe<String>;
  picUrl_gt?: Maybe<String>;
  picUrl_gte?: Maybe<String>;
  picUrl_contains?: Maybe<String>;
  picUrl_not_contains?: Maybe<String>;
  picUrl_starts_with?: Maybe<String>;
  picUrl_not_starts_with?: Maybe<String>;
  picUrl_ends_with?: Maybe<String>;
  picUrl_not_ends_with?: Maybe<String>;
  ageMin?: Maybe<Int>;
  ageMin_not?: Maybe<Int>;
  ageMin_in?: Maybe<Int[] | Int>;
  ageMin_not_in?: Maybe<Int[] | Int>;
  ageMin_lt?: Maybe<Int>;
  ageMin_lte?: Maybe<Int>;
  ageMin_gt?: Maybe<Int>;
  ageMin_gte?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  ageMax_not?: Maybe<Int>;
  ageMax_in?: Maybe<Int[] | Int>;
  ageMax_not_in?: Maybe<Int[] | Int>;
  ageMax_lt?: Maybe<Int>;
  ageMax_lte?: Maybe<Int>;
  ageMax_gt?: Maybe<Int>;
  ageMax_gte?: Maybe<Int>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface PlaceCreateInput {
  id?: Maybe<ID_Input>;
  googleId: String;
  moimCount?: Maybe<Int>;
  likes?: Maybe<Int>;
  dislikes?: Maybe<Int>;
  creator?: Maybe<UserCreateOneInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface MoimCreateWithoutCreatorInput {
  id?: Maybe<ID_Input>;
  place: PlaceCreateOneInput;
  description?: Maybe<String>;
  maxEntry?: Maybe<Int>;
  time: DateTimeInput;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  gender?: Maybe<String>;
  participants?: Maybe<UserCreateManyWithoutJoinedMoimInput>;
}

export interface UserUpdateManyDataInput {
  authType?: Maybe<String>;
  authKey?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  picUrl?: Maybe<String>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
}

export interface PlaceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlaceWhereInput>;
  AND?: Maybe<PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput>;
  OR?: Maybe<PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput>;
  NOT?: Maybe<PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput>;
}

export interface UserUpsertWithWhereUniqueWithoutJoinedMoimInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutJoinedMoimDataInput;
  create: UserCreateWithoutJoinedMoimInput;
}

export interface PlaceUpsertNestedInput {
  update: PlaceUpdateDataInput;
  create: PlaceCreateInput;
}

export interface MoimUpdateManyDataInput {
  description?: Maybe<String>;
  maxEntry?: Maybe<Int>;
  time?: Maybe<DateTimeInput>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  gender?: Maybe<String>;
}

export interface MoimUpdateManyWithWhereNestedInput {
  where: MoimScalarWhereInput;
  data: MoimUpdateManyDataInput;
}

export interface MoimScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  maxEntry?: Maybe<Int>;
  maxEntry_not?: Maybe<Int>;
  maxEntry_in?: Maybe<Int[] | Int>;
  maxEntry_not_in?: Maybe<Int[] | Int>;
  maxEntry_lt?: Maybe<Int>;
  maxEntry_lte?: Maybe<Int>;
  maxEntry_gt?: Maybe<Int>;
  maxEntry_gte?: Maybe<Int>;
  time?: Maybe<DateTimeInput>;
  time_not?: Maybe<DateTimeInput>;
  time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_lt?: Maybe<DateTimeInput>;
  time_lte?: Maybe<DateTimeInput>;
  time_gt?: Maybe<DateTimeInput>;
  time_gte?: Maybe<DateTimeInput>;
  ageMin?: Maybe<Int>;
  ageMin_not?: Maybe<Int>;
  ageMin_in?: Maybe<Int[] | Int>;
  ageMin_not_in?: Maybe<Int[] | Int>;
  ageMin_lt?: Maybe<Int>;
  ageMin_lte?: Maybe<Int>;
  ageMin_gt?: Maybe<Int>;
  ageMin_gte?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  ageMax_not?: Maybe<Int>;
  ageMax_in?: Maybe<Int[] | Int>;
  ageMax_not_in?: Maybe<Int[] | Int>;
  ageMax_lt?: Maybe<Int>;
  ageMax_lte?: Maybe<Int>;
  ageMax_gt?: Maybe<Int>;
  ageMax_gte?: Maybe<Int>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  AND?: Maybe<MoimScalarWhereInput[] | MoimScalarWhereInput>;
  OR?: Maybe<MoimScalarWhereInput[] | MoimScalarWhereInput>;
  NOT?: Maybe<MoimScalarWhereInput[] | MoimScalarWhereInput>;
}

export interface MoimUpsertWithWhereUniqueWithoutCreatorInput {
  where: MoimWhereUniqueInput;
  update: MoimUpdateWithoutCreatorDataInput;
  create: MoimCreateWithoutCreatorInput;
}

export interface UserUpsertWithoutCreatedMoimInput {
  update: UserUpdateWithoutCreatedMoimDataInput;
  create: UserCreateWithoutCreatedMoimInput;
}

export interface PlaceUpdateManyMutationInput {
  googleId?: Maybe<String>;
  moimCount?: Maybe<Int>;
  likes?: Maybe<Int>;
  dislikes?: Maybe<Int>;
}

export interface MoimWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  place?: Maybe<PlaceWhereInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  maxEntry?: Maybe<Int>;
  maxEntry_not?: Maybe<Int>;
  maxEntry_in?: Maybe<Int[] | Int>;
  maxEntry_not_in?: Maybe<Int[] | Int>;
  maxEntry_lt?: Maybe<Int>;
  maxEntry_lte?: Maybe<Int>;
  maxEntry_gt?: Maybe<Int>;
  maxEntry_gte?: Maybe<Int>;
  time?: Maybe<DateTimeInput>;
  time_not?: Maybe<DateTimeInput>;
  time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_lt?: Maybe<DateTimeInput>;
  time_lte?: Maybe<DateTimeInput>;
  time_gt?: Maybe<DateTimeInput>;
  time_gte?: Maybe<DateTimeInput>;
  creator?: Maybe<UserWhereInput>;
  ageMin?: Maybe<Int>;
  ageMin_not?: Maybe<Int>;
  ageMin_in?: Maybe<Int[] | Int>;
  ageMin_not_in?: Maybe<Int[] | Int>;
  ageMin_lt?: Maybe<Int>;
  ageMin_lte?: Maybe<Int>;
  ageMin_gt?: Maybe<Int>;
  ageMin_gte?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  ageMax_not?: Maybe<Int>;
  ageMax_in?: Maybe<Int[] | Int>;
  ageMax_not_in?: Maybe<Int[] | Int>;
  ageMax_lt?: Maybe<Int>;
  ageMax_lte?: Maybe<Int>;
  ageMax_gt?: Maybe<Int>;
  ageMax_gte?: Maybe<Int>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  participants_every?: Maybe<UserWhereInput>;
  participants_some?: Maybe<UserWhereInput>;
  participants_none?: Maybe<UserWhereInput>;
  AND?: Maybe<MoimWhereInput[] | MoimWhereInput>;
  OR?: Maybe<MoimWhereInput[] | MoimWhereInput>;
  NOT?: Maybe<MoimWhereInput[] | MoimWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  authType: String;
  authKey: String;
  name: String;
  gender: String;
  birthday: DateTimeInput;
  picUrl?: Maybe<String>;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  createdMoim?: Maybe<MoimCreateManyWithoutCreatorInput>;
  joinedMoim?: Maybe<MoimCreateManyWithoutParticipantsInput>;
  blacklist?: Maybe<UserCreateManyInput>;
}

export interface MoimCreateInput {
  id?: Maybe<ID_Input>;
  place: PlaceCreateOneInput;
  description?: Maybe<String>;
  maxEntry?: Maybe<Int>;
  time: DateTimeInput;
  creator: UserCreateOneWithoutCreatedMoimInput;
  ageMin?: Maybe<Int>;
  ageMax?: Maybe<Int>;
  gender?: Maybe<String>;
  participants?: Maybe<UserCreateManyWithoutJoinedMoimInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  authType: String;
  authKey: String;
  name: String;
  gender: String;
  joinedAt: DateTimeOutput;
  birthday: DateTimeOutput;
  picUrl: String;
  ageMin: Int;
  ageMax: Int;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  authType: () => Promise<String>;
  authKey: () => Promise<String>;
  name: () => Promise<String>;
  gender: () => Promise<String>;
  joinedAt: () => Promise<DateTimeOutput>;
  birthday: () => Promise<DateTimeOutput>;
  picUrl: () => Promise<String>;
  ageMin: () => Promise<Int>;
  ageMax: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  authType: () => Promise<AsyncIterator<String>>;
  authKey: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  joinedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  picUrl: () => Promise<AsyncIterator<String>>;
  ageMin: () => Promise<AsyncIterator<Int>>;
  ageMax: () => Promise<AsyncIterator<Int>>;
}

export interface MoimEdge {
  node: Moim;
  cursor: String;
}

export interface MoimEdgePromise extends Promise<MoimEdge>, Fragmentable {
  node: <T = MoimPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MoimEdgeSubscription
  extends Promise<AsyncIterator<MoimEdge>>,
    Fragmentable {
  node: <T = MoimSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  authType: String;
  authKey: String;
  name: String;
  gender: String;
  joinedAt: DateTimeOutput;
  birthday: DateTimeOutput;
  picUrl: String;
  ageMin: Int;
  ageMax: Int;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  authType: () => Promise<String>;
  authKey: () => Promise<String>;
  name: () => Promise<String>;
  gender: () => Promise<String>;
  joinedAt: () => Promise<DateTimeOutput>;
  birthday: () => Promise<DateTimeOutput>;
  picUrl: () => Promise<String>;
  ageMin: () => Promise<Int>;
  ageMax: () => Promise<Int>;
  createdMoim: <T = FragmentableArray<Moim>>(args?: {
    where?: MoimWhereInput;
    orderBy?: MoimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  joinedMoim: <T = FragmentableArray<Moim>>(args?: {
    where?: MoimWhereInput;
    orderBy?: MoimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blacklist: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  authType: () => Promise<AsyncIterator<String>>;
  authKey: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  joinedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  picUrl: () => Promise<AsyncIterator<String>>;
  ageMin: () => Promise<AsyncIterator<Int>>;
  ageMax: () => Promise<AsyncIterator<Int>>;
  createdMoim: <T = Promise<AsyncIterator<MoimSubscription>>>(args?: {
    where?: MoimWhereInput;
    orderBy?: MoimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  joinedMoim: <T = Promise<AsyncIterator<MoimSubscription>>>(args?: {
    where?: MoimWhereInput;
    orderBy?: MoimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blacklist: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  authType: () => Promise<String>;
  authKey: () => Promise<String>;
  name: () => Promise<String>;
  gender: () => Promise<String>;
  joinedAt: () => Promise<DateTimeOutput>;
  birthday: () => Promise<DateTimeOutput>;
  picUrl: () => Promise<String>;
  ageMin: () => Promise<Int>;
  ageMax: () => Promise<Int>;
  createdMoim: <T = FragmentableArray<Moim>>(args?: {
    where?: MoimWhereInput;
    orderBy?: MoimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  joinedMoim: <T = FragmentableArray<Moim>>(args?: {
    where?: MoimWhereInput;
    orderBy?: MoimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blacklist: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateMoim {
  count: Int;
}

export interface AggregateMoimPromise
  extends Promise<AggregateMoim>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMoimSubscription
  extends Promise<AsyncIterator<AggregateMoim>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlaceSubscriptionPayload {
  mutation: MutationType;
  node: Place;
  updatedFields: String[];
  previousValues: PlacePreviousValues;
}

export interface PlaceSubscriptionPayloadPromise
  extends Promise<PlaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlacePreviousValuesPromise>() => T;
}

export interface PlaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlacePreviousValuesSubscription>() => T;
}

export interface PlacePreviousValues {
  id: ID_Output;
  googleId: String;
  moimCount: Int;
  likes: Int;
  dislikes: Int;
}

export interface PlacePreviousValuesPromise
  extends Promise<PlacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  googleId: () => Promise<String>;
  moimCount: () => Promise<Int>;
  likes: () => Promise<Int>;
  dislikes: () => Promise<Int>;
}

export interface PlacePreviousValuesSubscription
  extends Promise<AsyncIterator<PlacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  googleId: () => Promise<AsyncIterator<String>>;
  moimCount: () => Promise<AsyncIterator<Int>>;
  likes: () => Promise<AsyncIterator<Int>>;
  dislikes: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlace {
  count: Int;
}

export interface AggregatePlacePromise
  extends Promise<AggregatePlace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaceSubscription
  extends Promise<AsyncIterator<AggregatePlace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PlaceConnection {
  pageInfo: PageInfo;
  edges: PlaceEdge[];
}

export interface PlaceConnectionPromise
  extends Promise<PlaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaceEdge>>() => T;
  aggregate: <T = AggregatePlacePromise>() => T;
}

export interface PlaceConnectionSubscription
  extends Promise<AsyncIterator<PlaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaceSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface MoimPreviousValues {
  id: ID_Output;
  description?: String;
  maxEntry: Int;
  time: DateTimeOutput;
  ageMin: Int;
  ageMax: Int;
  gender: String;
}

export interface MoimPreviousValuesPromise
  extends Promise<MoimPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  maxEntry: () => Promise<Int>;
  time: () => Promise<DateTimeOutput>;
  ageMin: () => Promise<Int>;
  ageMax: () => Promise<Int>;
  gender: () => Promise<String>;
}

export interface MoimPreviousValuesSubscription
  extends Promise<AsyncIterator<MoimPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  maxEntry: () => Promise<AsyncIterator<Int>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
  ageMin: () => Promise<AsyncIterator<Int>>;
  ageMax: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<String>>;
}

export interface MoimSubscriptionPayload {
  mutation: MutationType;
  node: Moim;
  updatedFields: String[];
  previousValues: MoimPreviousValues;
}

export interface MoimSubscriptionPayloadPromise
  extends Promise<MoimSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MoimPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MoimPreviousValuesPromise>() => T;
}

export interface MoimSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MoimSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MoimSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MoimPreviousValuesSubscription>() => T;
}

export interface Moim {
  id: ID_Output;
  description?: String;
  maxEntry: Int;
  time: DateTimeOutput;
  ageMin: Int;
  ageMax: Int;
  gender: String;
}

export interface MoimPromise extends Promise<Moim>, Fragmentable {
  id: () => Promise<ID_Output>;
  place: <T = PlacePromise>() => T;
  description: () => Promise<String>;
  maxEntry: () => Promise<Int>;
  time: () => Promise<DateTimeOutput>;
  creator: <T = UserPromise>() => T;
  ageMin: () => Promise<Int>;
  ageMax: () => Promise<Int>;
  gender: () => Promise<String>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MoimSubscription
  extends Promise<AsyncIterator<Moim>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  place: <T = PlaceSubscription>() => T;
  description: () => Promise<AsyncIterator<String>>;
  maxEntry: () => Promise<AsyncIterator<Int>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
  creator: <T = UserSubscription>() => T;
  ageMin: () => Promise<AsyncIterator<Int>>;
  ageMax: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<String>>;
  participants: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MoimNullablePromise
  extends Promise<Moim | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  place: <T = PlacePromise>() => T;
  description: () => Promise<String>;
  maxEntry: () => Promise<Int>;
  time: () => Promise<DateTimeOutput>;
  creator: <T = UserPromise>() => T;
  ageMin: () => Promise<Int>;
  ageMax: () => Promise<Int>;
  gender: () => Promise<String>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MoimConnection {
  pageInfo: PageInfo;
  edges: MoimEdge[];
}

export interface MoimConnectionPromise
  extends Promise<MoimConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MoimEdge>>() => T;
  aggregate: <T = AggregateMoimPromise>() => T;
}

export interface MoimConnectionSubscription
  extends Promise<AsyncIterator<MoimConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MoimEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMoimSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Place {
  id: ID_Output;
  googleId: String;
  moimCount: Int;
  likes: Int;
  dislikes: Int;
}

export interface PlacePromise extends Promise<Place>, Fragmentable {
  id: () => Promise<ID_Output>;
  googleId: () => Promise<String>;
  moimCount: () => Promise<Int>;
  likes: () => Promise<Int>;
  dislikes: () => Promise<Int>;
  creator: <T = UserPromise>() => T;
}

export interface PlaceSubscription
  extends Promise<AsyncIterator<Place>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  googleId: () => Promise<AsyncIterator<String>>;
  moimCount: () => Promise<AsyncIterator<Int>>;
  likes: () => Promise<AsyncIterator<Int>>;
  dislikes: () => Promise<AsyncIterator<Int>>;
  creator: <T = UserSubscription>() => T;
}

export interface PlaceNullablePromise
  extends Promise<Place | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  googleId: () => Promise<String>;
  moimCount: () => Promise<Int>;
  likes: () => Promise<Int>;
  dislikes: () => Promise<Int>;
  creator: <T = UserPromise>() => T;
}

export interface PlaceEdge {
  node: Place;
  cursor: String;
}

export interface PlaceEdgePromise extends Promise<PlaceEdge>, Fragmentable {
  node: <T = PlacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaceEdgeSubscription
  extends Promise<AsyncIterator<PlaceEdge>>,
    Fragmentable {
  node: <T = PlaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Moim",
    embedded: false
  },
  {
    name: "Place",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
