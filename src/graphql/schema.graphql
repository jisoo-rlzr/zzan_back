scalar DateTime

type Query {
  feed: [Moim!]
  # filterPosts(searchString: String): [Post!]!
  # post(id: ID!): Post
}

type Mutation {
  signupUser(authType: String!, authKey: String!, name: String!, gender: String!, birthday: DateTime!, picUrl: String): User!
  createMoim(placeId: String!, time: DateTime!, creatorId: String!, maxEntry: Int, description: String, ageMin: Int, ageMax: Int, gender: String): Moim!
  deleteMoim(id: ID!): Moim
  # publish(id: ID!): Moim
}

type User {
  id: ID!
  authType: String!
  authKey: String!
  name: String!
  gender: String!
  joinedAt: DateTime!
  birthday: DateTime!
  picUrl: String!
  ageMin: Int!
  ageMax: Int!
  createdMoim: [Moim]
  joinedMoim: [Moim]
  blacklist: [User]
}

type Moim {
  id: ID!
  place: Place!
  description: String
  maxEntry: Int!
  time: DateTime!
  creator: User!
  ageMin: Int!
  ageMax: Int!
  participants: [User!]!
  gender: String!
}

type Place {
  id: ID!
  googleId: String!
  moimCount: Int!
  likes: Int!
  dislikes: Int!
  creator: User
}

# type Post {
#   id: ID!
#   createdAt: DateTime!
#   updatedAt: DateTime!
#   published: Boolean!
#   title: String!
#   content: String
#   author: User!
# }

# type User {
#   id: ID!
#   email: String!
#   name: String
#   posts: [Post!]!
# }